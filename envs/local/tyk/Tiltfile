load('ext://namespace', 'namespace_create', 'namespace_inject')
load('ext://secret', 'secret_from_dict')

def helmfile_template(file):
  return local("helmfile -f %s template --include-crds | grep -v -e '^Decrypting .*' | grep -v -e '^Fetching .*' | grep -v 'as it is not a table.$'" % file)

namespace_create('tyk')

k8s_yaml(namespace_inject(read_file('policy-configmap.yaml'), 'tyk'))
# created with 
# kubectl create configmap sse-auth-pre-middleware --from-file=./k8s/tyk/middleware/sse-auth-pre-middleware.js --append-hash=true --dry-run=client -o yaml > ./k8s/tyk/ce/sse-auth-pre-middleware.yaml
k8s_yaml(namespace_inject(read_file('sse-auth-pre-middleware.yaml'), 'tyk'))

k8s_yaml(secret_from_dict(
    name='tyk-operator-conf',
    namespace='tyk',
    inputs={
        'TYK_MODE': 'ce',
        'TYK_URL': 'http://gateway-svc-tyk-headless.tyk.svc.cluster.local:8080',
        'TYK_ORG': '5e9d9544a1dcd60001d0ed20',
        'TYK_AUTH': 'CHANGEME', 
        'TYK_TLS_INSECURE_SKIP_VERIFY': 'true'
    }
))

# Tell Tilt to apply to k8s config generated by helmfile.
k8s_yaml(namespace_inject(helmfile_template("./helmfile.yaml"), 'tyk'))

k8s_resource(
  workload='gateway-tyk-headless',
  new_name='tyk-gateway',
  labels=['api-gateway']
)

k8s_resource(
  workload='tyk-operator-controller-manager',
  new_name='tyk-operator',
  labels=['ops'],
  resource_deps=['tyk-gateway']
)

k8s_yaml(['./api/eden.yaml', './api/heimdall.yaml'])

k8s_resource(
  objects=['eden-api:apidefinition'],
  new_name='eden-api',
  labels=['api-gateway'],
  resource_deps=['tyk-operator']
)

k8s_resource(
  objects=['heimdall-api:apidefinition'],
  new_name='heimdall-api',
  labels=['api-gateway'],
  resource_deps=['tyk-operator']
)
