/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * OpenAPI spec version: 1
 */
import { z as zod } from 'zod';

/**
 * There are many configuration options that alter the functionality
and behavior of django-allauth, some of which can also impact the
frontend. Therefore, relevant configuration options are exposed via
this endpoint. The data returned is not user/authentication
dependent. Hence, it suffices to only fetch this data once at boot
time of your application.

 * @summary Get configuration
 */
export const getAllauthClientV1ConfigParams = zod.object({
  client: zod.enum(['app', 'browser']),
});

export const getAllauthClientV1ConfigResponse = zod.object({
  data: zod.object({
    account: zod.object({
      authentication_method: zod.enum(['email', 'username', 'username_email']),
      is_open_for_signup: zod.boolean(),
      email_verification_by_code_enabled: zod.boolean(),
      login_by_code_enabled: zod.boolean(),
    }),
    socialaccount: zod
      .object({
        providers: zod.array(
          zod.object({
            id: zod.string(),
            name: zod.string(),
            client_id: zod.string().optional(),
            flows: zod.array(zod.enum(['provider_redirect', 'provider_token'])),
          })
        ),
      })
      .optional(),
    mfa: zod
      .object({
        supported_types: zod.array(zod.enum(['recovery_codes', 'totp'])),
      })
      .optional(),
    usersessions: zod
      .object({
        track_activity: zod.boolean(),
      })
      .optional(),
  }),
  status: zod.number(),
});
