/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * OpenAPI spec version: 1
 */
import { z as zod } from 'zod';

/**
 * Retrieve information about the authentication status for the current
session.

 * @summary Get authentication status

 */
export const getAllauthClientV1AuthSessionParams = zod.object({
  client: zod.enum(['app', 'browser']),
});

export const getAllauthClientV1AuthSessionHeader = zod.object({
  'X-Session-Token': zod.string().optional(),
});

export const getAllauthClientV1AuthSessionResponse = zod.object({
  status: zod.number(),
  data: zod.object({
    user: zod.object({
      id: zod.number().or(zod.string()).optional(),
      display: zod.string().optional(),
      has_usable_password: zod.boolean().optional(),
      email: zod.string().optional(),
      username: zod.string().optional(),
    }),
    methods: zod.array(
      zod
        .object({
          method: zod.enum(['password']),
          at: zod.number(),
          email: zod.string().optional(),
          username: zod.string().optional(),
        })
        .or(
          zod.object({
            method: zod.enum(['password']),
            at: zod.number(),
            reauthenticated: zod.literal(true),
          })
        )
        .or(
          zod.object({
            method: zod.enum(['socialaccount']),
            at: zod.number(),
            provider: zod.string(),
            uid: zod.string(),
          })
        )
        .or(
          zod.object({
            method: zod.enum(['mfa']),
            at: zod.number(),
            type: zod.enum(['recovery_codes', 'totp']),
            reauthenticated: zod.boolean().optional(),
          })
        )
    ),
  }),
  meta: zod
    .object({
      session_token: zod.string().optional(),
      access_token: zod.string().optional(),
    })
    .and(
      zod.object({
        is_authenticated: zod.boolean(),
      })
    ),
});

/**
 * Logs out the user from the current session.

 * @summary Logout
 */
export const deleteAllauthClientV1AuthSessionParams = zod.object({
  client: zod.enum(['app', 'browser']),
});

export const deleteAllauthClientV1AuthSessionHeader = zod.object({
  'X-Session-Token': zod.string().optional(),
});
